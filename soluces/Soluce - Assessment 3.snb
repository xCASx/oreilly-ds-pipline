{
  "metadata" : {
    "name" : "Soluce - Assessment 3",
    "user_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : "/root/.ivy2",
    "customRepos" : null,
    "customDeps" : [ "com.typesafe.akka %% akka-http-experimental % 1.0", "com.typesafe.akka %% akka-http-xml-experimental % 1.0", "com.typesafe.akka %% akka-http-spray-json-experimental % 1.0", "com.datastax.spark %% spark-cassandra-connector % 2.0.0-M3", "- org.apache.spark %% spark-core % _", "- org.apache.spark %% spark-streaming % _", "- org.scala-lang % _ % _", "- org.spark-project.spark % _ % _", "- io.netty % _ % _", "- javax.jms % jms % _", "- com.sun.jdmk % jmxtools % _", "- com.sun.jmx % jmxri % _" ],
    "customImports" : null,
    "customArgs" : [ "-Xms1024m", "-Xmx2048m" ],
    "customSparkConf" : {
      "spark.cores.max" : "2",
      "spark.cassandra.connection.host" : "localhost",
      "spark.executor.memory" : "512m",
      "spark.cassandra.output.batch.grouping.key" : "None",
      "spark.cassandra.output.batch.size.rows" : "10",
      "spark.cassandra.output.batch.size.bytes" : "2048",
      "spark.sql.shuffle.partitions" : "16"
    }
  },
  "cells" : [ {
    "metadata" : {
      "id" : "A0BB707F4FB141888F3B98E7A8C4A6E5"
    },
    "cell_type" : "markdown",
    "source" : "# Add a new service"
  }, {
    "metadata" : {
      "id" : "2A6083A6FE7D4D5C8513FC3BB126F0FE"
    },
    "cell_type" : "markdown",
    "source" : "## Context"
  }, {
    "metadata" : {
      "id" : "AC05111E956C4431BEBB4D4BE3D03B30"
    },
    "cell_type" : "markdown",
    "source" : "In the current assessment, you'll create a new service `http://localhost:2222/jpm` that will return a list of one Double `List[Double]` (_e.g._ `List(57.57)`).\n\nThe value is actually the last value of the **JPM** stock, you can rely on the `Access Service` notebook."
  }, {
    "metadata" : {
      "id" : "FAC2D5D10FAD472484ECC22785B1ADEC"
    },
    "cell_type" : "markdown",
    "source" : "## Code"
  }, {
    "metadata" : {
      "id" : "665A50C1FD5449448568AE7CEE22ACA1"
    },
    "cell_type" : "markdown",
    "source" : "We'll need to use the Spark Data Source api to access the data in cassandra, hence we'll need a `SQLContext` instance."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "00D7920B343B4740870A3F25018D953A"
    },
    "cell_type" : "code",
    "source" : "import scala.collection.JavaConverters._\nimport akka.actor.ActorSystem\nimport akka.http.scaladsl.Http\nimport akka.stream.ActorMaterializer",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "C8BC7D84129E42198A5C1F2464D6F103"
    },
    "cell_type" : "markdown",
    "source" : "In the following, you'll need to implement:\n* the function that retrieves the last value for `JPM`\n* add the `/jpm` path to the server definition that returns the value computed above\n* start the server listening on `localhost:2222`"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "323FB9D5450E411298699B1A9642167E"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.functions._\n\n// Returns JPM's last value\ndef jpm:List[Double] = /*???*/ {\n  def allDF = sparkSession.read.format(\"org.apache.spark.sql.cassandra\")\n                        .options(Map(\"keyspace\" -> \"pipeline\", \"table\" -> \"quotes\"))\n                        .load()\n  \n  val g = allDF.groupBy($\"symbol\").agg(max(\"ts\") as \"last\").withColumnRenamed(\"symbol\", \"gsymbol\")\n  val lastQuotes = allDF.join(g, $\"ts\" === $\"last\" && $\"symbol\" === $\"gsymbol\").select(\"symbol\", \"price\")\n\n  val last = lastQuotes.collect.toList.map(r => r.getAs[String](\"symbol\") â†’ r.getAs[Double](\"price\")).sortBy(_._1)\n\n  val (_, jpm) = last.find(_._1 == \"JPM\").get\n  List(jpm)\n}\n\n\n// DA SERVER\nimport akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._\nimport akka.http.scaladsl.server.Directives._\n\n@transient implicit val system = ActorSystem(\"jpm-system\")\n@transient implicit val materializer = ActorMaterializer()\n\n@transient val server = {\n  import spray.json.DefaultJsonProtocol._\n\n  val route =\n    get {\n      /*???*/ path(\"jpm\") {\n        complete(jpm)\n      }\n    }\n\n  /*???*/ Http().bindAndHandle(route, \"localhost\", 2222)\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "81E2A7D0AD694FB39EC548B6BA62CB5F"
    },
    "cell_type" : "markdown",
    "source" : "## Give the server a little try"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "96BC009CD63A4FA1A66E4137FF02D014"
    },
    "cell_type" : "code",
    "source" : ":sh curl http://localhost:2222/jpm",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}