{
  "metadata" : {
    "name" : "00_Just Enough Scala",
    "user_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : "/root/.ivy2",
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.executor.memory" : "1024m",
      "spark.cassandra.connection.host" : "127.0.0.1",
      "spark.cores.max" : "2",
      "spark.executor.cores" : "2",
      "spark.master" : "local[*]"
    }
  },
  "cells" : [ {
    "metadata" : {
      "id" : "582B008E5BC84F2081CDD7AB19D39D30"
    },
    "cell_type" : "markdown",
    "source" : "## Mutable variables"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "106DC3A5913B4AFD88822EE0F49FC222"
    },
    "cell_type" : "code",
    "source" : "var i:Int = 1",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "B47E834153E64B458808D60830508B73"
    },
    "cell_type" : "markdown",
    "source" : "We can reassign a value to `i`"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6FD4E71B924C47269D0163A894DC1583"
    },
    "cell_type" : "code",
    "source" : "i = 2",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "0C8AC4BFAF26476F855D4EDE0693F92B"
    },
    "cell_type" : "markdown",
    "source" : "## Immutable values"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6676D8465BA44643B5BB207CCEDD2B19"
    },
    "cell_type" : "code",
    "source" : "val s:String = \"a\"",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "BFB1EEF39559453C84A186FB12007657"
    },
    "cell_type" : "markdown",
    "source" : "Declaring `s` as `val` prevents new assignement"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AFFD78C889894C1B8CCFC0675BA5BEE3"
    },
    "cell_type" : "code",
    "source" : "s = \"c\"",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "E6A662872D45433BAAFE04D6CDEDF10C"
    },
    "cell_type" : "markdown",
    "source" : "## Function"
  }, {
    "metadata" : {
      "id" : "B2D9800FFF45478FBC9B4E2BBF84F709"
    },
    "cell_type" : "markdown",
    "source" : "We can declare inline function, the type will take a form of an application, as we can see below where the function applies a `Int` onto a `String`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5D4B42C0533145089F4C7449B0446C71"
    },
    "cell_type" : "code",
    "source" : "val f:String => Int = \n  (s: String) => {\n    val removeWhiteChars = s.replaceAll(\" \", \"\")\n    s.size\n  }",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "546FCE82828A420E9B9D4355F3ADECC7"
    },
    "cell_type" : "code",
    "source" : "f(\"So, Scala is as powerful as it is simple !\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "0CC62AD748AD4DCA8614C88909C8F000"
    },
    "cell_type" : "markdown",
    "source" : "Since functions can be defined as `val`s then they can be _serialized_. This is **crucial** to understand since it is linked to closures serialization."
  }, {
    "metadata" : {
      "id" : "6F4EAA4B4B6C497081DEE4F51D680024"
    },
    "cell_type" : "markdown",
    "source" : "> Note: the `return` can be avoided because every thing is an expression, see below"
  }, {
    "metadata" : {
      "id" : "E28AFA7BF8494A349E5F9121619F1628"
    },
    "cell_type" : "markdown",
    "source" : "## Types"
  }, {
    "metadata" : {
      "id" : "8B36D3299E99489DB249497A55F84E8D"
    },
    "cell_type" : "markdown",
    "source" : "Scala is strongly and statically typed, hence we can encapsulate our structure (or even behavior) using a powerful object oriented system."
  }, {
    "metadata" : {
      "id" : "90286E2C0D7349C291E39311309528D9"
    },
    "cell_type" : "markdown",
    "source" : "### Class"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6249BF07D3E9427EAA1E4B87B2CCE72F"
    },
    "cell_type" : "code",
    "source" : "class NewClass(val a:String, b:Int)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "29773A853D7D4DEBA06E1EAD3FA34984"
    },
    "cell_type" : "markdown",
    "source" : "Instances of `NewClass` can be created using `new`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7B0D5D57E9334D619B7D2DDE7C84B86E"
    },
    "cell_type" : "code",
    "source" : "val newClassInstance = new NewClass(\"ok\", 1)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "8AA11E8E321641398C4115ABA980F27D"
    },
    "cell_type" : "markdown",
    "source" : "`a` is a public field"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "EC9F7A7279B542598234A45E96008CE1"
    },
    "cell_type" : "code",
    "source" : "newClassInstance.a",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "7E0F1490E27C42AEB0D0BD08AA44784C"
    },
    "cell_type" : "markdown",
    "source" : "`b` is a constructor parameter"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "2A53374827C440478ABEC030E106F53D"
    },
    "cell_type" : "code",
    "source" : "newClassInstance.b",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "3542CEC02D8441B0807307EF28B5298E"
    },
    "cell_type" : "markdown",
    "source" : "#### Methods"
  }, {
    "metadata" : {
      "id" : "0C4E771126064A5D9B0343399ABF45A4"
    },
    "cell_type" : "markdown",
    "source" : "The behavior can be declared using methods (local functions), a method is essentially like this:\n\n```\ndef <method name> ( (<arg name> : <type name>)* ) = <body>\n```\n\nSo we assign (`=`) a body to a name with its typed arguments."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E838AD34BA5B4AD1A9D473AEE670EA2C"
    },
    "cell_type" : "code",
    "source" : "class ClassWithBehavior(i:Int) {\n  def add(j:Int) = i + j\n  def random():Int = i + scala.util.Random.nextInt\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1A8A7CBD878942C4810FA6277E22FF3D"
    },
    "cell_type" : "code",
    "source" : "val classWithBehaviorInstance = new ClassWithBehavior(5)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "61EAC56F954C49128F4BDB79F9CF64AD"
    },
    "cell_type" : "code",
    "source" : "classWithBehaviorInstance.add(10)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "AD477099634A466C8A2342FE0C65E670"
    },
    "cell_type" : "code",
    "source" : "classWithBehaviorInstance.random()",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "E4F8E3CAAFDA4A87A833621CCB4F262D"
    },
    "cell_type" : "markdown",
    "source" : "####  `apply`"
  }, {
    "metadata" : {
      "id" : "71BBBFBBA84D40419C8EAF09FBD7CF00"
    },
    "cell_type" : "markdown",
    "source" : "There is a special method in Scala that has an important meaning: `apply`."
  }, {
    "metadata" : {
      "id" : "09477E085D0545478E287C3708967350"
    },
    "cell_type" : "markdown",
    "source" : "If an `apply` method is declared in any type (see below) then an instance of this type can be used as a function which respects the `apply` signature."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "37304E93D79E4F28886E8C81010F9D69"
    },
    "cell_type" : "code",
    "source" : "class ThisCanBeAFunction(log:String=>Unit) {\n  def apply(s:String) = log(s)\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5A114AED7A494EB687B7BCDC7BA7F8FA"
    },
    "cell_type" : "code",
    "source" : "val trickyFun:ThisCanBeAFunction = new ThisCanBeAFunction((s:String) => println(\"trick: \" + s))",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E1DB66865B0C4FE290450E317EB9CA7C"
    },
    "cell_type" : "code",
    "source" : "trickyFun(\"no apply\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "E9B85C87D1B741CCAF0712AC8CA90891"
    },
    "cell_type" : "markdown",
    "source" : "> Note: `Unit` is like void like in any other language, but it has a type in Scala and can be used as such. Its only instance is the unit value `()`."
  }, {
    "metadata" : {
      "id" : "202B23BE4BF044D9B975950396A018E5"
    },
    "cell_type" : "markdown",
    "source" : "### Trait"
  }, {
    "metadata" : {
      "id" : "E77E6566FBFD4471815C0639FA645FA4"
    },
    "cell_type" : "markdown",
    "source" : "Abstraction in Scala can be declared into `trait`s which are like interfaces but allow more flexibility: a trait can be mixed in, have a state, implement methods.\n\nHowever, a trait cannot be instantiated and needs to be extended first."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1848ACC42E3849FA8BC56401B18C5CF4"
    },
    "cell_type" : "code",
    "source" : "trait Partial {\n  def todo:Double\n  \n  val value:Int = 10\n  \n  def done:String = \"\"+scala.util.Random.nextPrintableChar\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "33DE914BC7EC4DE3B07E2D6471FBD208"
    },
    "cell_type" : "code",
    "source" : "class FullType extends Partial {\n  override val value:Int = 20\n  \n  def todo:Double = scala.util.Random.nextDouble\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "16DE41E9EBE44C5B88F13FDDE6BDF2C5"
    },
    "cell_type" : "markdown",
    "source" : "### Object"
  }, {
    "metadata" : {
      "id" : "AA494825153E48E38E1F1C43B712757D"
    },
    "cell_type" : "markdown",
    "source" : "Sometimes we just want to lift an implementation as an object (thing about singleton). For this, you can simply declare a new structure to be an `object` which is combining declaration and instantiation."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8B5DFBE0443444F797A893FACE64C8BF"
    },
    "cell_type" : "code",
    "source" : "object FullObject extends Partial {\n  val todo:Double = 1.0\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B61EB97407A245DC9287C3711E1A33A5"
    },
    "cell_type" : "code",
    "source" : "FullObject.todo",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "5729D0FCC75B44408B5AA076BAE6B3FE"
    },
    "cell_type" : "markdown",
    "source" : "### Type Parameter (~ generic)"
  }, {
    "metadata" : {
      "id" : "AEED64C789E547668EB9F1AE17F7F313"
    },
    "cell_type" : "markdown",
    "source" : "Some behavior can be declared without fixing the real values onto which it'll be applied, in Java this is called generics.\n\nScala allows type parameters to be associated to high level types in order to bag behaviors together (for instance)."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5BF9BCA017814CC48734D290E8CEFFEC"
    },
    "cell_type" : "code",
    "source" : "trait Converted[I, O] {\n  def i:I\n  def convert(i:I):O\n  val o:O = convert(i)\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "D5D53243D11A45C19E29DA8EC537A605"
    },
    "cell_type" : "markdown",
    "source" : "We can now override and give _type values_.\n\nNote: we can also override the modifier for field, `def` can be overriden with a `val`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "185218F1BC674AE392FBBD125C5745ED"
    },
    "cell_type" : "code",
    "source" : "class StringToInt(val i:String) extends Converted[String, Int] {\n  def convert(s:String) = s.toInt\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "056DAC11E98F4291A17104900F7C52B3"
    },
    "cell_type" : "code",
    "source" : "val converted:StringToInt = new StringToInt(\"124\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "51FECFA29C3A4C31886B6420CD65605C"
    },
    "cell_type" : "code",
    "source" : "val convertedO:Int = converted.o",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "F00BDB87CBC1497F946F3B147EE73496"
    },
    "cell_type" : "markdown",
    "source" : "## Case"
  }, {
    "metadata" : {
      "id" : "A5F3EF82846A42A8AB0803925BE90C12"
    },
    "cell_type" : "markdown",
    "source" : "The language keyword `case` can be used in different scenarii but all are about **dealing with structures that can be parsed and introspected safely**. This statement implies that the structure has to be static and known by the compiler."
  }, {
    "metadata" : {
      "id" : "C9E72929ABDA46FB995C9FEDD5C900BB"
    },
    "cell_type" : "markdown",
    "source" : "### Immutable structures"
  }, {
    "metadata" : {
      "id" : "D45856D6D6EC41AF9DBA58EC4CBFB2FC"
    },
    "cell_type" : "markdown",
    "source" : "Based on the fact that the structure is statically known at compile time, the compiler can help on several phases. One thing he can do for instance is to generate code based on the known structure. For that purpose, the `case` modifier is used to declare immutable structures. That is because immutable structures are hard to deal for reasons like updating the values requires a copy constructor which is hard to maintain.\n\nImmutable structures in Scala are then defined using `case` and will generate (at least):\n* an attached object with **the same name**, called the companion object, defining a static `apply` function that acts as a factory method\n* copy constructor: which create a new instance based on all untouched values of the current instance identical\n* deconstructor: which explodes the current structure in a way that we can deal with internal values (see **Pattern Matching** below)."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8ED065E3C36D491DA9508F2ABF22BE27"
    },
    "cell_type" : "code",
    "source" : "case class ImmutableClass[V](k:String, value:V)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "BBA829770077433F8A615FA1CB615EC6"
    },
    "cell_type" : "markdown",
    "source" : "We can now create an instance of this class.\n\nThe `new` keyword can be omitted because the function `ImmutableClass.apply` is actually called."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "243CEA682C9F4E3486445998F407936C"
    },
    "cell_type" : "code",
    "source" : "val immutableData:ImmutableClass[Int] = ImmutableClass[Int](\"zero\", 0)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "EB99E90FBA884245A3E59A37A0329B13"
    },
    "cell_type" : "markdown",
    "source" : "The `copy` method is now available"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B3F94A81D4BA459F819D4112AD2D3B9B"
    },
    "cell_type" : "code",
    "source" : "immutableData.copy(\"o\", immutableData.value)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "85ED4791C4884233ACE5D96CAFB010B8"
    },
    "cell_type" : "markdown",
    "source" : "#### Default and named values"
  }, {
    "metadata" : {
      "id" : "670DDA11E3E64BFC870DE520157D1A4B"
    },
    "cell_type" : "markdown",
    "source" : "Using the `copy` function (for instance) can be tedious if there are many arguments, also you don't want to repeat yourself.\n\nSo Scala has also the concept of default values for function's arguments, in the case of `copy` the Scala compiler has assigned the value of the current instance as the default value for each respective argument.\n\nTo simplify its usage (regarding order specially), there is also the concept of named parameter, allowing the arguments to be given a value tagged with their name"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "81A243982DF243B6934B6107F24CE0E2"
    },
    "cell_type" : "code",
    "source" : "case class ImmutableClassWithDefault[V](k:String, value:V)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9449C88E65E445F2811755319C6D12C1"
    },
    "cell_type" : "code",
    "source" : "val immutableClassWithDefaultInstance:ImmutableClassWithDefault[Double] = ImmutableClassWithDefault[Double](\"zero\", 0.0)\n\nimmutableClassWithDefaultInstance.copy(k = \"o\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "149140C8484C44A99AFEC15C098A9C55"
    },
    "cell_type" : "markdown",
    "source" : "### Interesting Types"
  }, {
    "metadata" : {
      "id" : "19691E4CA74F48B4874E9437A390C1C8"
    },
    "cell_type" : "markdown",
    "source" : "#### Tuples"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "6DAFCE1C85094EAF8B6C03843D1AA94C"
    },
    "cell_type" : "code",
    "source" : "val stringAndFloat:(String, Float) = (\"one\", 1)\nval stringAndFloatAndInt:(String, Float, Int) = (\"one\", 1, 1)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "CE29819508614E5F9019F3D837D75E9D"
    },
    "cell_type" : "markdown",
    "source" : "We can then access safely element by index, yet be able to rely on the type infomation."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1786F5797A1B46C387C78F9DA5646715"
    },
    "cell_type" : "code",
    "source" : "stringAndFloatAndInt._2 + \" is a Float\"",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0AFB28C968754BE5A5B6064EC7427274"
    },
    "cell_type" : "code",
    "source" : ":markdown\n\n**Note**: string interpolation is also possible like this\n\n${stringAndFloatAndInt._2} is a Float",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "744B2AF0EC35497199F061DD7FC6CDF8"
    },
    "cell_type" : "markdown",
    "source" : "#### Option"
  }, {
    "metadata" : {
      "id" : "87D31102C14346899205D5B8F59FAE5B"
    },
    "cell_type" : "markdown",
    "source" : "Null are bad, Scala hates `null`s.\n\nSince it's still relevant to have _no values_ for an object, and we want to deal with it safely, Scala has used a (now) common pattern: using optional values.\n\nAn optional value is a type that has only two forms:\n* `None`: no value\n* `Some(v)`: has a value `v`\n\nOption has many advantages and methods attached to it, although it can seem to complexify the code, with a bit of practice `Option` becomes a killer feature that increase the code, yet increasing its safety, some interesting functions are listed below."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D9095FEE56C94D43B0091AA53287636F"
    },
    "cell_type" : "code",
    "source" : "val noValueOption:None.type = None\nval someStringValue :Some[String] = Some(\"ok\")\nval optionString1:Option[String] = noValueOption\nval optionString2:Option[String] = someStringValue",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "02E0689A76E945D981BB886DB0E92957"
    },
    "cell_type" : "markdown",
    "source" : "> Note: `Nothing` is a specific type in Scala which is actually **deriving all** types, hence it is always in the bottom of the type hierarchy and can be assigned to any other."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "17F075EC7C1947CA811F61D83FFFAD71"
    },
    "cell_type" : "code",
    "source" : ":markdown\n\n- `getOrElse`: return the value or the provided default: **${noValueOption.getOrElse(\"hello\")}** and **${someStringValue.getOrElse(\"no\")}**\n- `map`: deal with contained value if any: **${optionString2.map((s:String) => s.size)}**\n- `orElse`: chain optional values: **${optionString1 orElse optionString2}**",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "B179D574B52B40CF8132FC249E888A3B"
    },
    "cell_type" : "markdown",
    "source" : "> Note: sometimes omitting the `.` in Scala can make sense like in `optionString1 orElse optionString2`.\n\n> Note': so, yes dots and parenthesis can be omitted in Scala"
  }, {
    "metadata" : {
      "id" : "627A819798634AE686FAA7F08E22E639"
    },
    "cell_type" : "markdown",
    "source" : "#### Collections"
  }, {
    "metadata" : {
      "id" : "8E02328C698941F5BE322C3B8C1928F6"
    },
    "cell_type" : "markdown",
    "source" : "Collections in Scala are by default immutable structures from the package `scala.collection.immutable`, so you can use them like any other `case class` for instance."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "23EE4A78EE5D4E6CA7EB54C73493FE58"
    },
    "cell_type" : "code",
    "source" : "val oneToThree = List(1, 2, 3)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "1A5280F8310B4A2B84C97B906603CD4D"
    },
    "cell_type" : "markdown",
    "source" : "Hence adding an element needs an extra object referring to the previous one as the tail or the init (for instance):"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E6C9FA15C856418DB5F7F4F13AE133D4"
    },
    "cell_type" : "code",
    "source" : "val oneToFour = oneToThree :+ 4",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "31043B4445D44673A84F1989835F1D0E"
    },
    "cell_type" : "markdown",
    "source" : "The initial list remains though"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1097695257-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "9483E33476104D6B8222E3DE88359CD9"
    },
    "cell_type" : "code",
    "source" : "oneToThree",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "4EC2C6D02FA145C08BF3776E71FC8743"
    },
    "cell_type" : "markdown",
    "source" : "### Pattern matching"
  }, {
    "metadata" : {
      "id" : "9F7C763887FD45ABB3DF3E72A7362578"
    },
    "cell_type" : "markdown",
    "source" : "One of the most interesting feature of the Scala language regarding conciseness and readability is its pattern matching.\n\nThanks to static typing, immutable values and other characteristics of the language we can safely introspect structures and values to deal with different logical paths."
  }, {
    "metadata" : {
      "id" : "0C075EA9D0A9428F8898C2053813CF7D"
    },
    "cell_type" : "markdown",
    "source" : "This is the second usage of `case`, it will be now used to declare a structure that need to be matched by a given value. When a match is found, the behavior attached to the case is executed.\n\nThink of it as a powerful `switch` statement."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "72A69298A86C44708CFB3F04B67E2243"
    },
    "cell_type" : "code",
    "source" : "(optionString1 orElse optionString2) match {\n  case Some(\"ok\") => 0\n  case Some(x) if x.size >2 => 1\n  case x => // small leter == catch all\n    val message = \"unknown\"\n    s\"$x is $message\"\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "C68528C491D94202BDEC65D0E1EDE5E5"
    },
    "cell_type" : "markdown",
    "source" : "Match are typesafe, and thus `case` can be checked, so that you'll avoid mixing things up:"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0840DF2E9141433CA4EC9AF289C73E74"
    },
    "cell_type" : "code",
    "source" : "(optionString1 orElse optionString2) match {\n  case Some(\"ok\") => 0\n  case Some(x) if x.size >2 => 1\n  \n  case \"not a string\" => ???\n  \n  case x =>\n    val message = \"unknown\"\n    s\"$x is $message\"\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "D0A0794C62534F7BABF02BF5BDC8913C"
    },
    "cell_type" : "markdown",
    "source" : "## Everything is an expression"
  }, {
    "metadata" : {
      "id" : "378AF44E549345B38D6A910862963E34"
    },
    "cell_type" : "markdown",
    "source" : "Whatever you do in Scala, you will return a value. This value will be simply the last result of the last statement of the expression (code block, ...).\n\nThis avoid decoupling the declaration with the assignement like\n\n```\nvar s:String = null\nif (true) {\n  s = \"ok\"\n} else {\n  s = \"nok\"\n}\n``` "
  }, {
    "metadata" : {
      "id" : "2E454307C26E45968AC1E3102DDA9626"
    },
    "cell_type" : "markdown",
    "source" : "### `if`"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "EF0D06E272204B92B2DE376E5170F968"
    },
    "cell_type" : "code",
    "source" : "val ifExp:String = if (true) \"ok\" else \"nok\"",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "4E9AD93B071A42C8867A243342529A68"
    },
    "cell_type" : "markdown",
    "source" : "### `for`"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "BEF68A971402489F837FE45A6F21E1AB"
    },
    "cell_type" : "code",
    "source" : "val forExp:Seq[(Int, Int)] = for {\n  listElement1 <- 1 to 10\n  listElement2 <- 2 to 20 by 2\n} yield (listElement1, listElement2)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "AEADD723298B4E2B85D58EF08F3F7691"
    },
    "cell_type" : "markdown",
    "source" : "## Types are inferred"
  }, {
    "metadata" : {
      "id" : "700528509A674CC08BA3B22C483C6AB9"
    },
    "cell_type" : "markdown",
    "source" : "By the way, if you felt submerged by type notations... I agree. Luckily, although Scala is strongly and statically typed, type tagging is optional.\n\nSince everything is an expression, everything has a type and the type can be inferred by the last statement of the expression. The upper type in the common hierarchy is taken if there are several branches in the expressions that need to be resolved. The highest type being `Any`."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "822499D382944387A795942580D8D5A7"
    },
    "cell_type" : "code",
    "source" : "val optionString = if (scala.util.Random.nextBoolean) None else Some(\"ok\")",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1147D1C2F92A4F0E91785F4C09A53E69"
    },
    "cell_type" : "code",
    "source" : "val listOfDoubles = optionString match {\n  case Some(\"ok\") => List(1.0, 2, 3)\n  case Some(x) => Nil\n  case None => List(0d)\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "70492E9B4E604462B21FEDF69AD5B9CB"
    },
    "cell_type" : "code",
    "source" : "val mess = listOfDoubles.map(x => (x, scala.util.Random.nextBoolean)).map { \n  case (x, true) => s\"$x is true\"\n  case (x, false) if x > 2 => x - 2\n  case x => x\n}",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FD444FC6678E42E68F0D54F2AAA083E8"
    },
    "cell_type" : "code",
    "source" : "import scala.concurrent.Future\nimport scala.concurrent.ExecutionContext.Implicits.global\nval complex = Future { Left ( Option ( List( (1, 'a'), (2, 'b') ) zip List(\"one\", \"two\") ) ) }",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "318887616A854BA081A5102C9E9CA29F"
    },
    "cell_type" : "markdown",
    "source" : "## Short notation: `_`"
  }, {
    "metadata" : {
      "id" : "ED16079D1F854365947A84DB309EBE67"
    },
    "cell_type" : "markdown",
    "source" : "When using functional paradigm like in Spark for instance, we have to deal with a ton of functions in order to describe the logic in a smooth and comprehensible manner.\n\nWhich means that we regularly have to define small and sometimes trivial functions, which look like bloated using the full function definition notation."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1825460683-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "EC54A66636C14F14BBC5906749B93133"
    },
    "cell_type" : "code",
    "source" : "List(1, 2, 3).\n  map(x => x + 1).\n  map(x => (x, x % 2)).\n  toMap.\n  mapValues(x => x == 0)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "FAF5EE1A09724117810903238F7DF5DF"
    },
    "cell_type" : "markdown",
    "source" : "The above code can take a simple form using the short notation, using the underscore (`_`) as a replacement for the $i^{th}$ argument."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4BFAEB3D29314CEF96455F10E893B995"
    },
    "cell_type" : "code",
    "source" : "def addMethod(x:Int, y:Int):Int = x + y\n\nval add = (x:Int, y:Int) => x + y\n\nval addShort:(Int, Int)=>Int = _ + _",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab845480856-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "41A9C7DAE2C149C383C252BEE3A612B2"
    },
    "cell_type" : "code",
    "source" : "val listOfTuples = (1 to 100)\n\nlistOfTuples.reduce(addMethod)\n\nlistOfTuples.reduce(add)\n\nlistOfTuples.reduce(addShort)\n\nlistOfTuples.reduce((x:Int, y:Int) => x + y)\n\nlistOfTuples.reduce(_ + _)",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}